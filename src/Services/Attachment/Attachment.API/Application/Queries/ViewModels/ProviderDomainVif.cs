/*
 * MIND API
 *
 * This is the Master Inventory Network Database (MIND) API. MIND provides automated allocation of technical attributes needed to create IP and Ethernet VPNs on the global Sigma network. MIND supports the 'Nova' services specfication which defines the collection of connectivity services supported by ENT. Go to https://thehub.thomsonreuters.com/docs/DOC-2193014 to learn more.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.beasley@thomsonreuters.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Mind.Api.Models
{ 
    /// <summary>
    /// Model of a provider domain vif - a virtual attachment which is configured under a tenant-facing 
    /// tagged attachment in the provider domain
    /// </summary>
    [DataContract]
    public partial class ProviderDomainVif : IEquatable<ProviderDomainVif>
    { 
        /// <summary>
        /// The ID of the vif
        /// </summary>
        /// <value>Interface value denoting the ID of the vif</value>
        /// <example>99099</example>
        [DataMember(Name="vifId")]
        public int? VifId { get; private set; }

        /// <summary>
        /// The name of the vif. The name is a concatenation of the name of the attachment
        /// and the vlan tag assigned to the vif.
        /// </summary>
        /// <value>String value denoting the name of the vif</value>
        /// <example>TenGigabitEthernet0/1.100</example>
        [DataMember(Name="name")]
        public string Name { get; private set; }

        /// <summary>
        /// Determines if the vif is enabled for layer 3
        /// </summary>
        /// <value>Boolean value denoting whether the vif is enabled for layer 3</value>
        /// <example>true</example>
        [DataMember(Name="isLayer3")]
        public bool? IsLayer3 { get; private set; }

        /// <summary>
        /// The vlan tag number assigned to the vif
        /// </summary>
        /// <value>Integer denoting the vlan tag number assigned to the vif</value>
        /// <example>100</example>
        [DataMember(Name="vlanTag")]
        public int? VlanTag { get; private set; }

        /// <summary>
        /// The ID of the parent attachment
        /// </summary>
        /// <value>Integer value denoting the ID of the parent attachment</value>
        /// <example>1001</example>
        [DataMember(Name="attachmentId")]
        public int? AttachmentId { get; private set; }

        /// <summary>
        /// The name of the vif role
        /// </summary>
        /// <value>String value denoting the name of a vif role</value>
        /// <example>PE-CE-SERVICE</example>
        [Required]
        [DataMember(Name = "VifRoleName")]
        public string VifRoleName { get; private set; }

        /// <summary>
        /// The ID of the owning tenant
        /// </summary>
        /// <value>Integer value denoting the ID of the owning tenant</value>
        /// <example>991011</example>
        [DataMember(Name="tenantId")]
        public int? TenantId { get; private set; }

        /// <summary>
        /// THe routing instance to which the vif belongs
        /// </summary>
        /// <value>An instance of ProviderDomainRoutingInstance</value>
        [DataMember(Name="routingInstance")]
        public ProviderDomainRoutingInstance RoutingInstance { get; private set; }

        /// <summary>
        /// A list of vlan objects which comprise the vif
        /// </summary>
        /// <value>A list of vlan objects</value>
        [DataMember(Name="vlans")]
        public List<Vlan> Vlans { get; private set; }

        /// <summary>
        /// The contract bandwidth pool assigned to the vif.
        /// </summary>
        /// <value>A ContractBandwidthPool object</value>
        [DataMember(Name="contractBandwidthPool")]
        public ContractBandwidthPool ContractBandwidthPool { get; private set; }

        /// <summary>
        /// The maximum transmission unit supported by the vif
        /// </summary>
        /// <value>Am integer value denoting the MTU in bytes</value>
        /// <example>1500</example>
        [DataMember(Name = "mtu")]
        public int? Mtu { get; private set; }

        /// <summary>
        /// Network status of the vif.
        /// </summary>
        /// <value>String value denoting the network status</value>
        /// <example>Staged</example>
        [DataMember(Name = "networkStatus")]
        public string NetworkStatus { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProviderDomainVif {\n");
            sb.Append("  VifId: ").Append(VifId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsLayer3: ").Append(IsLayer3).Append("\n");
            sb.Append("  VlanTag: ").Append(VlanTag).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  RoutingInstance: ").Append(RoutingInstance).Append("\n");
            sb.Append("  Vlans: ").Append(Vlans).Append("\n");
            sb.Append("  ContractBandwidthPool: ").Append(ContractBandwidthPool).Append("\n");
            sb.Append("  Mtu: ").Append(Mtu).Append("\n");
            sb.Append("  VifRoleName: ").Append(VifRoleName).Append("\n");
            sb.Append("  NetworkStatus: ").Append(NetworkStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProviderDomainVif)obj);
        }

        /// <summary>
        /// Returns true if ProviderDomainVif instances are equal
        /// </summary>
        /// <param name="other">Instance of ProviderDomainVif to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProviderDomainVif other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VifId == other.VifId ||
                    VifId != null &&
                    VifId.Equals(other.VifId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    VifRoleName == other.VifRoleName ||
                    VifRoleName != null &&
                    VifRoleName.Equals(other.VifRoleName)
                ) &&
                (
                    IsLayer3 == other.IsLayer3 ||
                    IsLayer3 != null &&
                    IsLayer3.Equals(other.IsLayer3)
                ) && 
                (
                    VlanTag == other.VlanTag ||
                    VlanTag != null &&
                    VlanTag.Equals(other.VlanTag)
                ) && 
                (
                    AttachmentId == other.AttachmentId ||
                    AttachmentId != null &&
                    AttachmentId.Equals(other.AttachmentId)
                ) && 
                (
                    TenantId == other.TenantId ||
                    TenantId != null &&
                    TenantId.Equals(other.TenantId)
                ) && 
                (
                    RoutingInstance == other.RoutingInstance ||
                    RoutingInstance != null &&
                    RoutingInstance.Equals(other.RoutingInstance)
                ) && 
                (
                    Vlans == other.Vlans ||
                    Vlans != null &&
                    Vlans.SequenceEqual(other.Vlans)
                ) && 
                (
                    ContractBandwidthPool == other.ContractBandwidthPool ||
                    ContractBandwidthPool != null &&
                    ContractBandwidthPool.Equals(other.ContractBandwidthPool)
                ) &&
                (
                    Mtu == other.Mtu ||
                    Mtu != null &&
                    Mtu.Equals(other.Mtu)
                ) &&
                (
                    NetworkStatus == other.NetworkStatus ||
                    NetworkStatus != null &&
                    NetworkStatus.Equals(other.NetworkStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VifId != null)
                    hashCode = hashCode * 59 + VifId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IsLayer3 != null)
                    hashCode = hashCode * 59 + IsLayer3.GetHashCode();
                    if (VlanTag != null)
                    hashCode = hashCode * 59 + VlanTag.GetHashCode();
                    if (AttachmentId != null)
                    hashCode = hashCode * 59 + AttachmentId.GetHashCode();
                    if (TenantId != null)
                    hashCode = hashCode * 59 + TenantId.GetHashCode();
                    if (RoutingInstance != null)
                    hashCode = hashCode * 59 + RoutingInstance.GetHashCode();
                    if (Vlans != null)
                    hashCode = hashCode * 59 + Vlans.GetHashCode();
                    if (ContractBandwidthPool != null)
                    hashCode = hashCode * 59 + ContractBandwidthPool.GetHashCode();
                    if (Mtu != null)
                    hashCode = hashCode * 59 + Mtu.GetHashCode();
                    if (VifRoleName != null)
                    hashCode = hashCode * 59 + VifRoleName.GetHashCode();
                    if (NetworkStatus != null)
                    hashCode = hashCode * 59 + NetworkStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProviderDomainVif left, ProviderDomainVif right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProviderDomainVif left, ProviderDomainVif right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
